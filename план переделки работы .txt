Во вступлении описать, что в данное время в цифровой век при больших потоках и объемах информации важно иметь высокую пропускную способность для приема и передачи информации. Также в условиях санкций важно иметь собственную разработку данного устройства(не уверен, стоит ли это говорить). Для выполнения задачи быстрой передачи данных используют OFDM. Описать, что за технология, почему и зачем, в чем плюсы. Существуют реализации данной модуляции, работающие на компьютерах. ***описать условия в 20мкс за такт***. Задача же этой работы проанализировать существующие реализации, реализовать и оптимизировать их для работы на микроконтроллере, проверить работу данного алгоритма на распространенных МК и выявить, какой МК(или какое ядро) нужен для работы данного алгоритма с заявленной точностью и скоростью.

Далее описание каждого блока:

S2P - просто описание и реализация;

Mapper - Существующие типы модуляции, их краткая характеристика, выбор необходимой, реализация и почему такая;

IFFT - Зачем нужно ПФ, небольшая база про него, разница ДПФ и БПФ, моя идея реализации ДПФ, немного описание библиотеки FFTW. (разработаны свои алгоритмы на случай, если библиотеки не поддерживаются МК или ядром) Описание важности числа гармоник, график с выбором числа гармоник и почему. Потом описание про точность вычислений и шум. График оттуда. Итоговые реализации.

P2S - описание и реализация. Доописать, что формат выдачи вот такой и с учетом того, что данные нужно ужать во столько-то раз, мы будем делать так: условно на вход у нас подается 8 сигналов и их надо ужать до одного, сохранив фазу и амплитуду. То есть, проход по каждому сигналу, но при этом берем мы каждую восьмую точку и сигналы записываем подряд. Если степень сжимаемости была рассчитана достаточной, то этого всего хватит.

Проблема синхронизации. Нам нужно выполнять несколько действий: Доставать данные из битового потока, который подает их с определенной частотой; посылать данные с определенной частотой; Выполнять все блоки работы программы с определенной частотой. В этом и проблема, нужно параллельно получать новые данные, отдавать старый сигнал и выполнять основную функцию на МК с одним ядром. Основная идея (для эмуляторов на компе) - создать многопоточную программу. Для ПК и их процов все будет хорошо, потому что на пк и их софте и больше мощности, и улучшенные технологии по распараллеливанию процессов и потоков, только на МК нет встроенного планировщика задач, как на компах, по умолчанию программы на них рассчитаны выполняться одним сплошным потоком. 
Существует несколько подходов и решений: 
1. RTOS - операционные системы реального времени. Они позволяют управлять потоками(ресурсами, приоритетностью, создание\удаление, синхронизация), и предоставляют планировщик задач.(описать плюсы и минусы)
2. Собственная эмуляция многопоточности за счет системы прерываний(моя штука, выбираю ее, описать плюсы) как будет мое: есть внешнее прерывание, на это внешнее прерывание подается сигнал, когда нужно принимать и отправлять биты. Когда там есть сигнал, мы начинаем наш процесс работы. Основной поток вычислений выполняется на main(). Этот поток тактируется таймером(причем тактируется весь цикл выполнения, а не функции отдельно). Вместе с этим с определенными периодами система прерываний дергает чтение входных данных(в зависимости от скорости входных данных) и выдачу данных, просчитанных на предыдущем цикле(ДВА РАЗНЫХ ПРЕРЫВАНИЯ С ДВУМЯ РАЗНЫМИ ПЕРИОДАМИ).

Потом описать, что были взяты 2 МК на 2-х популярных ядрах - Cortex-M3 и Cortex-M4. Почему на этих ядрах, в чем их аппаратные отличия. Предоставление выбранной конфигурации, тесты на них, предоставление результата.
Вывод о том, что можно использовать МК на вот таком ядре с вот такой частотой и будет обеспечена передача данных с вот такой скоростью.
